<#@ template language="C#" inherits="BaseTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="GarciaCore.CodeGenerator" #>
<#@ import namespace="GarciaCore.Infrastructure" #>
<#@ include file="IncludeWarning.t4" #>
<#@ include file="IncludeUsings.t4" #>
using Microsoft.EntityFrameworkCore;
using GarciaCore.Application.Contracts.Persistence;
using GarciaCore.Persistence.EntityFramework;
<#= GetUsings() #>

namespace <#= Namespace #>
{
    public interface I<#= Item.Name #>Repository : IAsyncRepository<<#= Item.Name #>>
    {
<#
        if (Item.Properties.Count(x => x.InnerType != null) > 0)
	    {
#>
        Task<List<<#= Item.Name #>>> GetAllWithIncludesAsync();
        Task<<#= Item.Name #>> GetByIdWithIncludesAsync(long id);
<#
        }
#>
    }

    public partial class <#= Item.Name #>Repository : <#= BaseClass #><<#= Item.Name #>>, I<#= Item.Name #>Repository
    {
        public <#= Item.Name #>Repository(DbContext dbContext) : base(dbContext) { }

<#
        if (Item.Properties.Count(x => x.InnerType != null) > 0)
	    {
#>
        public async Task<List<<#= Item.Name #>>> GetAllWithIncludesAsync()
        {
            return await (_dbContext as <#= GeneratorRepository.Solution.Name #>DbContext).<#= Item.Name #>s
<#
        foreach (var property in Item.Properties.Where(x => x.InnerType != null))
	    {
            string innerTypeName = this.generator.GetInnerTypeName(property);
#>
                .Include(i => i.<#= property.Name #>)
<#
        }
#>
                .AsNoTracking()
                .ToListAsync();
        }

        public async Task<<#= Item.Name #>> GetByIdWithIncludesAsync(<#= IdTypeName #> id)
        {
            return await (_dbContext as <#= GeneratorRepository.Solution.Name #>DbContext).<#= Item.Name #>s
<#
        foreach (var property in Item.Properties.Where(x => x.InnerType != null))
	    {
            string innerTypeName = this.generator.GetInnerTypeName(property);
#>
                .Include(i => i.<#= property.Name #>)
<#
        }
#>
                .Where(i => i.Id == id)
                .AsNoTracking()
                .FirstOrDefaultAsync();
        }
<#
        }
#>
    }
}

<#+
    protected override Generator CreateGenerator()
	{
		return new RepositoryGenerator();
	}
#>