<#@ template language="C#" inherits="BaseTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="GarciaCore.CodeGenerator" #>
<#@ import namespace="GarciaCore.Infrastructure" #>
<#@ import namespace="GarciaCore.Application" #>
<#@ include file="IncludeWarning.t4" #>
<#@ include file="IncludeUsings.t4" #>
using System.ComponentModel.DataAnnotations.Schema;
using System.Text.Json.Serialization;
<#= GetUsings() #>
namespace <#= Namespace #>
{
    public partial class <#= Item.Name #> : Entity<<#= IdTypeName #>>
    {
<#
        foreach (var property in Item.Properties.Where(x => !GeneratorRepository.BaseLevelProperties.Contains(x.Name)))
	    {
            string innerTypeName = generator.GetInnerTypeName(property);
            
            if (property.Type == ItemPropertyType.Photo && property.MappingType == ItemPropertyMappingType.List)
            {
#>
        [JsonIgnore]
        public string <#= property.Name.ToPascalCase() #>String { get { return string.Join(',', <#= property.Name.ToPascalCase() #>); } set { <#= property.Name.ToPascalCase() #> = value.Split(',').ToList(); } }
        [NotMapped]
<#
            }
#>
        public <#= innerTypeName #> <#= property.Name.ToPascalCase() #> { get; set; }
<#
        }
#>
    }
}
<#+
    protected override Generator CreateGenerator()
	{
		return new EntityGenerator();
	}
#>