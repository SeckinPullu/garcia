<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="GarciaCore.CodeGenerator" #>
<#@ import namespace="GarciaCore.Infrastructure" #>

<#+
protected Generator generator;

public BaseTemplate() 
{
    generator = CreateGenerator();
} 
    
protected virtual Generator CreateGenerator()
{
    return null; 
}

public void test()
{
}

private string idTypeName;

public string IdTypeName
{
    get
    {
        if (string.IsNullOrEmpty(idTypeName))
        {
            idTypeName = generator.GetIdTypeName(Item);
        }

        return idTypeName;
    }
}

public GarciaCore.CodeGenerator.Item Item { get; set; }
public string BaseClass { get; set; }
public string Namespace { get; set; }
public string Includes { get; set; }
public List<string> Usings { get; set; }

public string GetUsings()
{
    var text = "";

    if (Usings != null)
    {
        foreach (var usingItem in Usings)
        {
            text += $"using {usingItem};\n";
        }
    }

    return text.TrimEnd('\n');
}

protected string GetRepositoryType(string repository)
{
    return GeneratorRepository.ContainsGenerator(GeneratorType.Repository) ? repository + "Repository" : "AsyncRepository<" + repository + ">";
}
#>