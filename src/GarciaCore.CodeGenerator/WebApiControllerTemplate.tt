<#@ template language="C#" inherits="BaseTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="GarciaCore.CodeGenerator" #>
<#@ import namespace="GarciaCore.Infrastructure" #>
using GarciaCore.Infrastructure;
using GarciaCore.Domain;

namespace <#= Namespace #>
{
    public partial class <#= Item.Name #>Controller : <#= BaseClass #>
    {
        private I<#= Item.Name #>Service _<#= Item.Name.ToCamelCase() #>Service;
        private I<#= Item.Name #>Repository _<#= Item.Name.ToCamelCase() #>Repository;

        public <#= Item.Name #>Controller(IOptions<Settings> settings, <#= Item.Name #>Repository <#= Item.Name #>Repository, I<#= Item.Name #>Service <#= Item.Name #>Service, IMediator mediator, IQrCodeService qrCodeService) : base(settings, repository, mediator)
        {
            _<#= Item.Name.ToCamelCase() #>Service = <#= Item.Name.ToCamelCase() #>Service;
            _<#= Item.Name.ToCamelCase() #>Repository = <#= Item.Name.ToCamelCase() #>Repository;
        }
<#
        foreach (var property in Item.Properties)
	    {
            string innerTypeName = this.generator.GetInnerTypeName(property);
#>
        public <#= innerTypeName #> <#= property.Name.ToPascalCase() #> { get; set; }
<#
        }
#>
    }
}

<#+
    protected override Generator CreateGenerator()
	{
		return new WebApiControllerGenerator();
	}
#>