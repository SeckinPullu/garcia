<#@ template language="C#" inherits="BaseTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="GarciaCore.CodeGenerator" #>
<#@ import namespace="GarciaCore.Infrastructure" #>
<#@ import namespace="GarciaCore.Application" #>
<#@ include file="IncludeWarning.t4" #>
<#@ include file="IncludeUsings.t4" #>
using Microsoft.Extensions.Options;
using Microsoft.AspNetCore.Mvc;
using GarciaCore.Infrastructure.Api;
using GarciaCore.Application;
using MediatR;
using Newtonsoft.Json;
<#= GetUsings() #>
<#
    var services = $"I{Item.Name}Service {Item.Name.ToCamelCase()}Service";

    if (GeneratorRepository.ContainsIntegration(IntegrationType.AmazonS3FileUpload) || GeneratorRepository.ContainsIntegration(IntegrationType.LocalFileUpload))
    {
        services += ", IFileUploadService fileUploadService";
#>
using GarciaCore.Application.Contracts.FileUpload;
<#
    }
#>

namespace <#= Namespace #>
{
    public partial class <#= Item.Name #>Controller : <#= BaseClass #>
    {
        private I<#= Item.Name #>Query _<#= Item.Name.ToCamelCase() #>Query;
        private I<#= Item.Name #>Service _<#= Item.Name.ToCamelCase() #>Service;
<#
    if (GeneratorRepository.ContainsIntegration(IntegrationType.AmazonS3FileUpload) || GeneratorRepository.ContainsIntegration(IntegrationType.LocalFileUpload))
    {
#>
<#
    }
#>

        public <#= Item.Name #>Controller(IOptions<GarciaCoreInfrastructureApiSettings> settings, I<#= Item.Name #>Query <#= Item.Name.ToCamelCase() #>Query, <#= services #>, IMediator mediator) : base(settings, null, mediator)
        {
            _<#= Item.Name.ToCamelCase() #>Query = <#= Item.Name.ToCamelCase() #>Query;
            _<#= Item.Name.ToCamelCase() #>Service = <#= Item.Name.ToCamelCase() #>Service;
<#
    if (GeneratorRepository.ContainsIntegration(IntegrationType.AmazonS3FileUpload) || GeneratorRepository.ContainsIntegration(IntegrationType.LocalFileUpload))
    {
#>
            _fileUploadService = fileUploadService;
<#
    }
#>
        }

        [HttpPost("api/<#= Item.Name #>", Name = "Create<#= Item.Name #>")]
        public async Task<ActionResult<BaseResponse<Create<#= Item.Name #>Command>>> Create<#= Item.Name #>([FromBody] Create<#= Item.Name #>Command command)
        {
            var response = await _mediator.Send(command);
            return StatusCode(response.StatusCode, response.Result);
        }

<# 
    if (Item.MultipartUpload)
    {
#>
        [HttpPost("api/<#= Item.Name #>/Multipart", Name = "Create<#= Item.Name #>WithMultipartUpload")]
        public async Task<ActionResult<BaseResponse<Create<#= Item.Name #>Command>>> Create<#= Item.Name #>WithMultipartUpload([FromForm] string data)
        {
            data = CleanJson(data);
            var command = JsonConvert.DeserializeObject<Create<#= Item.Name #>Command>(data);
            var files = await MultipartUploadAsync();
<#
    foreach (var property in Item.Properties.Where(x => x.Type == ItemPropertyType.Photo && x.MappingType == ItemPropertyMappingType.Property))
    {
#>
            command.<#= property.Name #> = files.FirstOrDefault(x => x.Name == "<#= property.Name #>").FileName;
<#
    }

    foreach (var property in Item.Properties.Where(x => x.Type == ItemPropertyType.Photo && x.MappingType == ItemPropertyMappingType.List))
    {
#>
            command.<#= property.Name #> = files.Where(x => x.Name == "<#= property.Name #>").Select(x => x.FileName).ToList();
<#
    }

    foreach (var property in Item.Properties.Where(x => x.Type == ItemPropertyType.Class && x.MappingType == ItemPropertyMappingType.List && x.InnerType != null))
    {
        var propertyItem = GeneratorRepository.Items.FirstOrDefault(x => x.Name == property.InnerType.Name);

        if (propertyItem != null)
        {
            foreach (var propertyItemProperty in propertyItem.Properties.Where(x => x.Type == ItemPropertyType.Photo && x.MappingType == ItemPropertyMappingType.Property))
            {
#>

            for (int i = 0; i < (files.Count() < command.<#= property.Name #>.Count ? files.Count() : command.<#= property.Name #>.Count); i++)
            {
                command.<#= property.Name #>[i].<#= propertyItemProperty.Name #> = files[i].FileName;
            }

<#
            }
        }
    }
#>
            var response = await _mediator.Send(command);
            return Ok(command);
        }

        [HttpPut("api/<#= Item.Name #>/Multipart", Name = "Update<#= Item.Name #>WithMultipartUpload")]
        public async Task<ActionResult<BaseResponse<Update<#= Item.Name #>Command>>> Update<#= Item.Name #>WithMultipartUpload([FromForm] string data)
        {
            data = CleanJson(data);
            var command = JsonConvert.DeserializeObject<Create<#= Item.Name #>Command>(data);
            var files = await MultipartUploadAsync();
<#
    foreach (var property in Item.Properties.Where(x => x.Type == ItemPropertyType.Photo && x.MappingType == ItemPropertyMappingType.Property))
    {
#>
            command.<#= property.Name #> = files.FirstOrDefault(x => x.Name == "<#= property.Name #>").FileName;
<#
    }

    foreach (var property in Item.Properties.Where(x => x.Type == ItemPropertyType.Photo && x.MappingType == ItemPropertyMappingType.List))
    {
#>
            command.<#= property.Name #> = files.Where(x => x.Name == "<#= property.Name #>").Select(x => x.FileName).ToList();
<#
    }
#>
            var response = await _mediator.Send(command);
            return Ok(command);
        }
<#
    }
#>
        
        [HttpPut("api/<#= Item.Name #>", Name = "Update<#= Item.Name #>")]
        public async Task<ActionResult<BaseResponse<Update<#= Item.Name #>Command>>> Update<#= Item.Name #>([FromBody] Update<#= Item.Name #>Command command)
        {
            var response = await _mediator.Send(command);
            return StatusCode(response.StatusCode, response.Result);
        }

        [HttpDelete("api/<#= Item.Name #>/{id}", Name = "Delete<#= Item.Name #>")]
        public async Task<ActionResult<BaseResponse<Delete<#= Item.Name #>Command>>> Delete<#= Item.Name #>(Delete<#= Item.Name #>Command command)
        {
            var response = await _mediator.Send(command);
            return StatusCode(response.StatusCode, response.Result);
        }

        [HttpGet("api/<#= Item.Name #>", Name = "GetAll<#= Item.Name #>s")]
        public async Task<ActionResult<List<<#= Item.Name #><#= GeneratorRepository.ApplicationModelDtoPostfix #>>>> GetAll<#= Item.Name #>s()
        {
            var items = await _<#= Item.Name.ToCamelCase() #>Service.GetAllAsync();
            return Ok(items);
        }

        [HttpGet("api/<#= Item.Name #>/{id}", Name = "Get<#= Item.Name #>")]
        public async Task<ActionResult<<#= Item.Name #><#= GeneratorRepository.ApplicationModelDtoPostfix #>>> Get<#= Item.Name #>(<#= IdTypeName #> id)
        {
            var item = await _<#= Item.Name.ToCamelCase() #>Service.GetAsync(id);

            if (item != null)
            {
                return Ok(item);
            }

            return NotFound();
        }
<#
        foreach (var property in Item.Properties.Where(x => x.MappingType == ItemPropertyMappingType.List && x.Type == ItemPropertyType.Class))
	    {
            string innerTypeName = this.generator.GetInnerTypeName(property, postfix: GeneratorRepository.ApplicationModelDtoPostfix);
#>
        
        [HttpGet("api/<#= Item.Name #>/{id}/<#= property.Name.ToPascalCase() #>")]
        public async Task<ActionResult<<#= innerTypeName #>>> Get<#= property.Name.ToPascalCase() #>(<#= IdTypeName #> id)
        {
            var items = await _<#= Item.Name.ToCamelCase() #>Service.Get<#= property.Name.ToPascalCase() #>Async(id);

            if (items != null)
            {
                return Ok(items);
            }

            return NotFound();
        }
<#
        }
#>
    }
}

<#+
    protected override Generator CreateGenerator()
	{
		return new CQRSWebApiControllerGenerator();
	}
#>