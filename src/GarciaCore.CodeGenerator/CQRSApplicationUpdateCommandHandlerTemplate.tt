<#@ template language="C#" inherits="BaseTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="GarciaCore.CodeGenerator" #>
<#@ import namespace="GarciaCore.Infrastructure" #>
<#@ import namespace="GarciaCore.Application" #>
<#@ include file="IncludeWarning.t4" #>
<#@ include file="IncludeUsings.t4" #>
using GarciaCore.Application;
using GarciaCore.Application.Contracts.Persistence;
using MediatR;
using AutoMapper;
<#= GetUsings() #>
<#
    var repositoryString = $"I{GetRepositoryType(Item.Name)} {Item.Name.ToCamelCase()}Repository";
    var properties = Item.Properties.Where(x => x.Type == ItemPropertyType.Class);
    var repositories = new List<string>();

    foreach (var property in properties)
    {
        if (!repositories.Contains(property.InnerType.Name))
        {
            repositories.Add(property.InnerType.Name);
        }
    }

    foreach (var repository in repositories)
    {
        repositoryString += $", I{GetRepositoryType(repository)} {repository.ToCamelCase()}Repository";
    }

    repositoryString = repositoryString.Trim().TrimEnd(',');
#>

namespace <#= Namespace #>
{
    public partial class Update<#= Item.Name #>CommandHandler : IRequestHandler<Update<#= Item.Name #>Command, BaseResponse<<#= IdTypeName #>>>
    {
        private readonly IMapper _mapper;
        private readonly I<#= GetRepositoryType(Item.Name) #> _<#= Item.Name.ToCamelCase() #>Repository;
<#
    foreach (var repository in repositories)
    {
#>
        private readonly I<#= GetRepositoryType(repository) #> _<#= repository.ToCamelCase() #>Repository;
<#
    }
#>

        public Update<#= Item.Name #>CommandHandler(IMapper mapper, <#= repositoryString #>)
        {
            _mapper = mapper;
            _<#= Item.Name.ToCamelCase() #>Repository = <#= Item.Name.ToCamelCase() #>Repository;
<#
    foreach (var repository in repositories)
    {
#>
            _<#= repository.ToCamelCase() #>Repository = <#= repository.ToCamelCase() #>Repository;
<#
    }
#>
        }

        public async Task<BaseResponse<<#= IdTypeName #>>> Handle(Update<#= Item.Name #>Command request, CancellationToken cancellationToken)
        {
            var item = await _<#= Item.Name.ToCamelCase() #>Repository.GetByIdAsync(request.Id);

            if (item == null)
            {
                throw new DomainNotFoundException($"<#= Item.Name #> {request.Id} not found");
            }

            var updatedItem = Helpers.BasicMap(item, request);
<#
    foreach (var property in properties.Where(x => x.MappingType == ItemPropertyMappingType.Property && x.Type == ItemPropertyType.Class))
    {
#>
            updatedItem.<#= property.Name #> = await _<#=property.InnerType.Name.ToCamelCase() #>Repository.GetByIdAsync(request.<#= property.Name #>Id);
<#
    }
#>
            var result = await _<#= Item.Name.ToCamelCase() #>Repository.UpdateAsync(updatedItem);
            
            if (result > 0)
            {
                return new BaseResponse<<#= IdTypeName #>>(item.Id, System.Net.HttpStatusCode.OK);
            }

            return new BaseResponse<<#= IdTypeName #>>(item.Id, new ApiError("Something went wrong!", "<#= Item.Name #> cannot be updated."));
        }
    }
}

<#+
    protected override Generator CreateGenerator()
	{
		return new CQRSApplicationUpdateCommandHandlerGenerator();
	}
#>