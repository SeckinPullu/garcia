<#@ template language="C#" inherits="BaseTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="GarciaCore.CodeGenerator" #>
<#@ import namespace="GarciaCore.Infrastructure" #>
<#@ import namespace="GarciaCore.Application" #>
<#@ include file="IncludeWarning.t4" #>
<#@ include file="IncludeUsings.t4" #>
using MediatR;
<#= GetUsings() #>
<#
    var repositoryString = $"I{GetRepositoryType(Item.Name)} {Item.Name.ToCamelCase()}Repository";
    var properties = Item.Properties.Where(x => x.Type == ItemPropertyType.Class);
    var repositories = new List<string>();

    foreach (var property in properties)
    {
        if (!repositories.Contains(property.InnerType.Name))
        {
            repositories.Add(property.InnerType.Name);
        }
    }

    foreach (var repository in repositories)
    {
        repositoryString += $", I{GetRepositoryType(repository)} {repository.ToCamelCase()}Repository";
    }

    repositoryString = repositoryString.Trim().TrimEnd(',');
#>

namespace <#= Namespace #>
{
    public partial class Delete<#= Item.Name #>CommandHandler : IRequestHandler<Delete<#= Item.Name #>Command, int>
    {
        private readonly I<#= GetRepositoryType(Item.Name) #> _<#= Item.Name.ToCamelCase() #>Repository;
<#
    foreach (var repository in repositories)
    {
#>
        private readonly I<#= GetRepositoryType(repository) #> _<#= repository.ToCamelCase() #>Repository;
<#
    }
#>

        public Delete<#= Item.Name #>CommandHandler(<#= repositoryString #>)
        {
            _<#= Item.Name.ToCamelCase() #>Repository =  <#= Item.Name.ToCamelCase() #>Repository;
        }

        public async Task<int> Handle(Delete<#= Item.Name #>Command request, CancellationToken cancellationToken)
        {
            var item = await _<#= Item.Name.ToCamelCase() #>Repository.GetByIdAsync(request.Id);

            if (item == null)
            {
                throw new DomainNotFoundException($"<#= Item.Name #> {request.Id} not found");
            }
            
            item.IsDeleted = true;
            var result = await _<#= Item.Name.ToCamelCase() #>Repository.SaveAsync(item);
            return result;
        }
    }
}

<#+
    protected override Generator CreateGenerator()
	{
		return new CQRSApplicationDeleteCommandHandlerGenerator();
	}
#>