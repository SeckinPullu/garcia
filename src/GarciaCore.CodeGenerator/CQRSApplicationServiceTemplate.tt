<#@ template language="C#" inherits="BaseTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="GarciaCore.CodeGenerator" #>
<#@ import namespace="GarciaCore.Infrastructure" #>
<#@ import namespace="GarciaCore.Application" #>
<#@ include file="IncludeWarning.t4" #>
<#@ include file="IncludeUsings.t4" #>
using GarciaCore.Application.Contracts.Persistence;
using AutoMapper;
using Microsoft.Extensions.Options;
<#= GetUsings() #>
<#
    if (GeneratorRepository.ContainsGenerator(GeneratorType.Model))
    {
#>
<#
    }
#>

namespace <#= Namespace #>
{
    public interface I<#= Item.Name #>Service
    {
        Task<<#= Item.Name #><#= GeneratorRepository.ApplicationModelDtoPostfix #>> GetAsync(<#= IdTypeName #> id);
        Task<List<<#= Item.Name #><#= GeneratorRepository.ApplicationModelDtoPostfix #>>> GetAllAsync();
<#
        foreach (var property in Item.Properties.Where(x => x.MappingType == ItemPropertyMappingType.List && x.Type == ItemPropertyType.Class))
	    {
            string innerTypeName = this.generator.GetInnerTypeName(property, postfix: GeneratorRepository.ApplicationModelDtoPostfix);
#>
        Task<<#= innerTypeName #>> Get<#= property.Name.ToPascalCase() #>Async(<#= IdTypeName #> id);
<#
        }
#>
    }

    public partial class <#= Item.Name #>Service : I<#= Item.Name #>Service
    {
        private Settings _settings;
        private I<#= GetRepositoryType(Item.Name) #> _<#= Item.Name.ToCamelCase() #>Repository;
        private readonly IMapper _mapper;


        public <#= Item.Name #>Service(IOptions<Settings> settings, IMapper mapper, I<#= GetRepositoryType(Item.Name) #> <#= Item.Name.ToCamelCase() #>Repository)
        {
            _settings = settings.Value;
            _mapper = mapper;
            _<#= Item.Name.ToCamelCase() #>Repository = <#= Item.Name.ToCamelCase() #>Repository;
        }

        public async Task<<#= Item.Name #><#= GeneratorRepository.ApplicationModelDtoPostfix #>> GetAsync(<#= IdTypeName #> id)
        {
            var item = await _<#= Item.Name.ToCamelCase() #>Repository.GetByIdAsync(id);
            var model = _mapper.Map<<#= Item.Name #><#= GeneratorRepository.ApplicationModelDtoPostfix #>>(item);
            return model;
        }

        public async Task<List<<#= Item.Name #><#= GeneratorRepository.ApplicationModelDtoPostfix #>>> GetAllAsync()
        {
            var items = await _<#= Item.Name.ToCamelCase() #>Repository.GetAllAsync();
            return _mapper.Map<List<<#= Item.Name #><#= GeneratorRepository.ApplicationModelDtoPostfix #>>>(items);
        }

<#
        foreach (var property in Item.Properties.Where(x => x.MappingType == ItemPropertyMappingType.List && x.Type == ItemPropertyType.Class))
	    {
            string innerTypeName = this.generator.GetInnerTypeName(property, postfix: GeneratorRepository.ApplicationModelDtoPostfix);
#>
        public async Task<<#= innerTypeName #>> Get<#= property.Name.ToPascalCase() #>Async(<#= IdTypeName #> id)
        {
            var item = await _<#= Item.Name.ToCamelCase() #>Repository.GetByIdAsync(id);

            if (item != null)
            {
                var result = _mapper.Map<<#= innerTypeName #>>(item.<#= property.Name #>);
                return result;
            }

            return null;
        }
<#
        }
#>
    }
}

<#+
    protected override Generator CreateGenerator()
	{
		return new CQRSApplicationServiceGenerator();
	}
#>