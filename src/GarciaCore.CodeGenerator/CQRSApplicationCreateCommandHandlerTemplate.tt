<#@ template language="C#" inherits="BaseTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="GarciaCore.CodeGenerator" #>
<#@ import namespace="GarciaCore.Infrastructure" #>
<#@ import namespace="GarciaCore.Application" #>
<#@ include file="IncludeWarning.t4" #>
<#@ include file="IncludeUsings.t4" #>
using MediatR;
using AutoMapper;
<#= GetUsings() #>
<#
    var repositoryString = $"I{Item.Name}Repository {Item.Name.ToCamelCase()}Repository";
    var properties = Item.Properties.Where(x => x.Type == ItemPropertyType.Class);
    var repositories = new List<string>();

    foreach (var property in properties)
    {
        if (!repositories.Contains(property.InnerType.Name))
        {
            repositories.Add(property.InnerType.Name);
        }
    }

    foreach (var repository in repositories)
    {
        repositoryString += $", I{repository}Repository {repository.ToCamelCase()}Repository";
    }

    repositoryString = repositoryString.Trim().TrimEnd(',');
#>

namespace <#= Namespace #>
{
    public partial class Create<#= Item.Name #>CommandHandler : IRequestHandler<Create<#= Item.Name #>Command, BaseResponse<<#= IdTypeName #>>>
    {
        private readonly I<#= Item.Name #>Repository _<#= Item.Name.ToCamelCase() #>Repository;
        private readonly IMapper _mapper;
<#
    foreach (var repository in repositories)
    {
#>
        private readonly I<#= repository #>Repository _<#= repository.ToCamelCase() #>Repository;
<#
    }
#>

        public Create<#= Item.Name #>CommandHandler(<#= repositoryString #>, IMapper mapper)
        {
            _<#= Item.Name.ToCamelCase() #>Repository = <#= Item.Name.ToCamelCase() #>Repository;
            _mapper = mapper;
<#
    foreach (var repository in repositories)
    {
#>
            _<#= repository.ToCamelCase() #>Repository = <#= repository.ToCamelCase() #>Repository;
<#
    }
#>
        }

        public async Task<int> Handle(Create<#= Item.Name #>Command request, CancellationToken cancellationToken)
        {
            var item = _mapper.Map<<#= Item.Name #>>(request);
            var result = await _<#= Item.Name.ToCamelCase() #>Repository.SaveAsync(item);
            return new BaseResponse<<#= IdTypeName #>>(basket.Id, System.Net.HttpStatusCode.Created);
        }
    }
}

<#+
    protected override Generator CreateGenerator()
	{
		return new CQRSApplicationCreateCommandHandlerGenerator();
	}
#>