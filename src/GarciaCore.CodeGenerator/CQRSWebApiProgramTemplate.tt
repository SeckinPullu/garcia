<#@ template language="C#" inherits="BaseTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="GarciaCore.CodeGenerator" #>
<#@ import namespace="GarciaCore.Infrastructure" #>
<#@ include file="IncludeWarning.t4" #>
<#@ include file="IncludeUsings.t4" #>
using FluentValidation.AspNetCore;
using Microsoft.AspNetCore.Mvc;
using GarciaCore.Application;
using GarciaCore.Infrastructure.Api.Filters;
<#= GetUsings() #>
using <#= Namespace #>;
<#
    if (GeneratorRepository.ContainsIntegration(IntegrationType.SQLServer) 
        || GeneratorRepository.ContainsIntegration(IntegrationType.PostgreSQL)
        || GeneratorRepository.ContainsIntegration(IntegrationType.MySQL))
    {
#>
using Microsoft.EntityFrameworkCore;
using GarciaCore.Persistence.EntityFramework;
<#
    }

    if (GeneratorRepository.ContainsGenerator(GeneratorType.WebApiAuthentication))
    {
#>
using GarciaCore.Application.Contracts.Identity;
using GarciaCore.Infrastructure.Identity;
<#
    }

    if (GeneratorRepository.ContainsIntegration(IntegrationType.AmazonS3FileUpload) || GeneratorRepository.ContainsIntegration(IntegrationType.LocalFileUpload))
    {
#>
using GarciaCore.Application.Contracts.FileUpload;
using GarciaCore.Application.Services;
<#
    }

    if (GeneratorRepository.ContainsIntegration(IntegrationType.SQLServer))
    {
#>
using GarciaCore.Persistence.EntityFramework.SqlServer;
<#
    }

    if (GeneratorRepository.ContainsIntegration(IntegrationType.PostgreSQL))
    {
#>
using GarciaCore.Persistence.EntityFramework.PostgreSql;
<#
    }

    if (GeneratorRepository.ContainsIntegration(IntegrationType.MySQL))
    {
#>
using GarciaCore.Persistence.EntityFramework.MySql;
<#
    }

    if (GeneratorRepository.ContainsIntegration(IntegrationType.MongoDB))
    {
#>
using GarciaCore.Persistence.MongoDb;
<#
    }

    if (GeneratorRepository.ContainsIntegration(IntegrationType.Redis))
    {
#>
using GarciaCore.Persistence.Redis;
<#
    }
#>

var builder = WebApplication.CreateBuilder(args);
builder.Services
    .AddControllers(opt =>
    {
        opt.Filters.Add(typeof(ValidationFilter<ApiError>));
    })
    .AddJsonOptions(opt => opt.JsonSerializerOptions.ReferenceHandler = System.Text.Json.Serialization.ReferenceHandler.IgnoreCycles);

builder.Services.Configure<ApiBehaviorOptions>(opt =>
{
    opt.SuppressModelStateInvalidFilter = true;
});

builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
builder.Services.AddApplicationServices();
<#
    if (GeneratorRepository.ContainsGenerator(GeneratorType.WebApiAuthentication))
    {
#>
builder.Services.AddScoped<IAuthenticationService, AuthenticationService>();
builder.Services.AddScoped<ILoggedInUserService, LoggedInUserService>();
builder.Services.RegisterServices(new JwtIssuerOptions() { Issuer = builder.Configuration.GetSection(nameof(JwtIssuerOptions))[nameof(JwtIssuerOptions.Issuer)], Audience = builder.Configuration.GetSection(nameof(JwtIssuerOptions))[nameof(JwtIssuerOptions.Audience)] });
<#
    }

    if (GeneratorRepository.ContainsIntegration(IntegrationType.MongoDB))
    {
#>
builder.Services.AddMongoDbSettings(builder.Configuration);
builder.Services.AddMongoDbRepository();
<#
    }

    if (GeneratorRepository.ContainsIntegration(IntegrationType.SQLServer) 
        || GeneratorRepository.ContainsIntegration(IntegrationType.PostgreSQL)
        || GeneratorRepository.ContainsIntegration(IntegrationType.MySQL))
    {
#>
builder.Services.AddEfCoreInMemory<<#= GeneratorRepository.Solution.Name #>DbContext>("<#= GeneratorRepository.Solution.Name #>");
<#
    }

    if (GeneratorRepository.ContainsIntegration(IntegrationType.AmazonS3FileUpload))
    {
#>
builder.Services.AddScoped<IFileUploadService, AmazonS3FileUplaodService>();
builder.Services.Configure<AmazonS3Settings>(builder.Configuration.GetSection(nameof(AmazonS3Settings)));
<#
    }

    if (GeneratorRepository.ContainsIntegration(IntegrationType.LocalFileUpload))
    {
#>
builder.Services.AddScoped<IFileUploadService, LocalFileUplaodService>();
builder.Services.Configure<FileUploadSettings>(builder.Configuration.GetSection(nameof(FileUploadSettings)));
<#
    }
#>

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.UseAuthorization();

app.MapControllers();

app.Run();
public partial class Program { }


<#+
    protected override Generator CreateGenerator()
	{
		return new RepositoryGenerator();
	}
#>